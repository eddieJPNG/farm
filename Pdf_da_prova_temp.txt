Universidade Estadual do Piauí - UESPI  
Curso de Tecnologia em Sistemas de Computação  
Disciplina: Algoritmos e Programação Estruturada  
Professor: Eyder Rios  

───────────────────────────────────────────────  
              2ª AVALIAÇÃO - TRABALHO DE IMPLEMENTAÇÃO  
      SISTEMA DE CONTROLE DE INVENTÁRIO DE UMA FAZENDA DIGITAL  
───────────────────────────────────────────────  

1. OBJETIVO GERAL  
Desenvolver um sistema de software de média complexidade que realize o cadastro, 
monitoramento e controle de recursos de uma fazenda digital, utilizando a linguagem Python 3.  
O sistema deverá permitir o gerenciamento de animais, plantações e insumos, aplicando os 
conceitos de estruturas de dados, manipulação de arquivos, funções, módulos, tratamento de 
erros e geração de relatórios ordenados.  

───────────────────────────────────────────────  
2. DIRETRIZES GERAIS  
───────────────────────────────────────────────  
- Trabalho em equipes de até 4 alunos.  
- Todos devem contribuir e compreender o sistema.  
- A identificação completa (nome e matrícula) deve constar:  
  • No arquivo principal (main.py), em forma de comentário no início do código;  
  • Em um arquivo obrigatório chamado README, contendo os nomes completos.  

O arquivo README servirá como identificação formal da equipe e será utilizado para fins de 
registro e avaliação.  

───────────────────────────────────────────────  
3. REQUISITOS DO SISTEMA  
───────────────────────────────────────────────  

3.1 REQUISITOS FUNCIONAIS  
O sistema deverá ser capaz de:  

1. Cadastrar Animais  
   - Inserir dados como ID, espécie, peso e idade.  
   - Marcar o status do animal (ativo, vendido ou falecido).  

2. Cadastrar Plantações  
   - Registrar tipo de cultura, área (ha) e data de plantio.  
   - Calcular automaticamente a data estimada de colheita.  

3. Gerenciar Insumos  
   - Cadastrar insumos (ração, sementes, fertilizantes, medicamentos).  
   - Controlar o estoque (entrada e saída).  
   - Impedir saídas superiores à quantidade disponível.  

4. Registrar Movimentações  
   - Registrar operações como venda de animal, colheita e consumo de insumo.  
   - Associar data e descrição textual.  

5. Gerar Relatórios  
   - Relatório geral dos animais, plantações e insumos.  
   - Ordenar por Nome/ID (A–Z), Quantidade (↓), Status (ativo, colhido, etc).  
   - Salvar relatório em "report.txt" com:  
     • Cabeçalho com data e hora  
     • Totais por categoria  

6. Pesquisar Registros  
   - Localizar animais, plantações ou insumos pelo ID ou nome.  

7. Persistir e Recuperar Dados  
   - Usar arquivos JSON (animals.json, plants.json, inputs.json, movements.json).  
   - Carregar dados ao iniciar e salvar ao encerrar o sistema.  

8. Gerar Arquivo de Identificação da Equipe  
   - Incluir o arquivo README com os dados dos integrantes.  

───────────────────────────────────────────────  
3.2 REQUISITOS NÃO FUNCIONAIS  
───────────────────────────────────────────────  

1. Padronização da Linguagem  
   - Identificadores e arquivos em inglês.  
   - Interface do usuário em português.  

2. Estruturas de Dados  
   - Utilizar listas e dicionários (List[Dict]).  

───────────────────────────────────────────────  
ENTIDADE: ANIMAL  
───────────────────────────────────────────────  
Arquivo: animals.json  

| Campo   | Tipo     | Descrição |  
|----------|----------|------------|  
| id       | string/int | Identificador único do animal. |  
| species  | string   | Espécie (bovino, caprino etc). |  
| age      | float/int | Idade em meses ou anos. |  
| weight   | float    | Peso em kg. |  
| status   | string   | Situação: active, sold, dead. |  

Finalidade: rastrear, listar e atualizar informações do rebanho.  

───────────────────────────────────────────────  
ENTIDADE: PLANTAÇÃO  
───────────────────────────────────────────────  
Arquivo: plants.json  

| Campo         | Tipo     | Descrição |  
|----------------|----------|------------|  
| id             | string/int | Identificador único da plantação. |  
| crop_type      | string   | Tipo de cultura (milho, soja, etc). |  
| area           | float    | Área cultivada (ha). |  
| planting_date  | string   | Data de plantio (YYYY-MM-DD). |  
| harvest_date   | string   | Data estimada de colheita. |  
| status         | string   | Situação: planted, harvested, inactive. |  

Finalidade: gerenciar o ciclo produtivo e produtividade.  

───────────────────────────────────────────────  
ENTIDADE: INSUMO  
───────────────────────────────────────────────  
Arquivo: inputs.json  

| Campo     | Tipo     | Descrição |  
|------------|----------|------------|  
| id         | string/int | Identificador único do insumo. |  
| name       | string   | Nome do insumo. |  
| quantity   | float    | Quantidade disponível. |  
| unit       | string   | Unidade de medida (kg, L, saco). |  
| category   | string   | Categoria (feed, seed, fertilizer, medicine). |  

Finalidade: controlar o estoque e apoiar o planejamento operacional.  

───────────────────────────────────────────────  
4. MODULARIZAÇÃO DO CÓDIGO  
───────────────────────────────────────────────  

| Módulo         | Responsabilidade |  
|-----------------|------------------|  
| main.py         | Menu principal e interação com o usuário |  
| animals.py      | Cadastro e atualização de animais |  
| plants.py       | Controle de plantações |  
| inputs.py       | Controle de insumos |  
| movements.py    | Registro de vendas, colheitas e consumos |  
| files.py        | Leitura e gravação em JSON |  
| reports.py      | Geração de relatórios |  

───────────────────────────────────────────────  
5. TRATAMENTO DE ERROS  
───────────────────────────────────────────────  
- Usar try/except para:  
  • Entradas inválidas  
  • Garantir consistência dos arquivos  
  • Exibir mensagens claras  

───────────────────────────────────────────────  
6. PERSISTÊNCIA DE DADOS  
───────────────────────────────────────────────  
- Criar automaticamente os arquivos JSON caso não existam.  

───────────────────────────────────────────────  
7. ESTRUTURA ESPERADA DO PROJETO  
───────────────────────────────────────────────  

farm/  
│  
├── src/  
│   ├── main.py  
│   ├── animals.py  
│   ├── plants.py  
│   ├── inputs.py  
│   ├── movements.py  
│   ├── files.py  
│   └── reports.py  
│  
├── data/  
│   ├── animals.json  
│   ├── plants.json  
│   ├── inputs.json  
│   └── movements.json  
│  
└── README.md  

───────────────────────────────────────────────  
8. CRITÉRIOS DE AVALIAÇÃO  
───────────────────────────────────────────────  

| Critério                    | Descrição | Peso |  
|------------------------------|------------|------|  
| Funcionalidade geral         | Operações implementadas corretamente | 25% |  
| Estruturas de dados          | Uso de listas e dicionários | 15% |  
| Manipulação de arquivos      | Persistência correta em JSON | 15% |  
| Funções e modularização      | Clareza e organização do código | 15% |  
| Tratamento de erros          | Uso de exceções e prevenção de falhas | 10% |  
| Relatórios e ordenação       | Correção na geração dos relatórios | 10% |  
| Padronização da linguagem    | Inglês nos identificadores, PT-BR na interface | 5% |  
| Documentação (README)        | Identificação da equipe e clareza | 5% |  

───────────────────────────────────────────────  
9. ORIENTAÇÕES DE ENTREGA  
───────────────────────────────────────────────  
- Entregar em formato `.zip`, contendo todos os arquivos e dados gerados.  
- O sistema deve iniciar pelo arquivo `main.py`.  
- Cada grupo deve enviar um único arquivo representando o trabalho.  
- A ausência do README acarretará desconto na nota de documentação.  

───────────────────────────────────────────────  
FIM DO DOCUMENTO  
───────────────────────────────────────────────
